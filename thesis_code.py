# -*- coding: utf-8 -*-
"""compas notebook py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tbKcXHbINYBElvQJlstAQZKoD-lToOxs
"""

import pandas as pd
import numpy as np
from datetime import datetime
import time
import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdate
import statsmodels.api as sm
from scipy import stats
from tabulate import tabulate
import csv

raw_data = pd.read_csv('/content/compas-scores-two-years.csv')
raw_data.info()

with open('compas-scores-two-years_reduced.csv', newline = '') as csvfile:
  reader = csv.reader(csvfile, delimiter = ' ')

"""Loading the Data"""

data = raw_data.loc[:, ['age', 'c_charge_degree', 'race', 'age_cat', 'score_text', 'sex', 'days_b_screening_arrest', 'decile_score', 'is_recid', 'two_year_recid', 'c_jail_in', 'c_jail_out']]

data = data[(data['days_b_screening_arrest'] <= 30 ) & (data['days_b_screening_arrest'] >= -30 ) & (data['is_recid'] != -1 ) & (data['c_charge_degree'] != "0" ) & (data['score_text'] != 'N/A')]
data.info()

#j_in = pd.to_datetime(data['c_jail_in'])
#j_out = pd.to_datetime(data['c_jail_out'])
#length_of_stay = pd.to_numeric(j_out, errors='coerce').astype(pd.Int64Dtype()) - pd.to_numeric(j_in, errors='coerce').astype(pd.Int64Dtype())
#length_of_stay.to_list
#length_of_stay.astype(int)
#df = data['decile_score']
#ls2 = length_of_stay.iloc[1]
#print(len(length_of_stay))
#print(len(df))
# stats.pearsonr(ls2, df)
# length_of_stay.corr(df)

data['age_cat'].describe()

data['race'].describe()

data['race'].value_counts()

data['race'].unique()

data['c_charge_degree'].unique()

print("Black defendants: %.2f%%" %            (3175 / 6172 * 100))
print("White defendants: %.2f%%" %            (2103 / 6172 * 100))
print("Hispanic defendants: %.2f%%" %         (509  / 6172 * 100))
print("Asian defendants: %.2f%%" %            (31   / 6172 * 100))
print("Native American defendants: %.2f%%" %  (11   / 6172 * 100))

data['score_text'].describe()

pd.crosstab(data['sex'], data['race'])

data['sex'].describe()

data['sex'].value_counts()

print("Men: %.2f%%" %   (4997 / 6172 * 100))
print("Women: %.2f%%" % (1175 / 6172 * 100))

print(sum(data['two_year_recid'] == 1))

print((sum(data['two_year_recid'] == 1))/data.count() * 100)

pd.crosstab(data['decile_score'], data['race'])

aadata = data[(data['race'] =="African-American")]
cdata = data[(data['race'] =="Caucasian")]
print(aadata)
print(aadata['decile_score'])
print(aadata['decile_score'].value_counts())

values = np.arange(0, 650, 100)
value_increment = 100
scores = [1,2,3,4,5,6,7,8,9,10]
plt.bar(scores, aadata['decile_score'].value_counts())
plt.ylabel("counts")
plt.xlabel("Decile Score")
plt.title('Black Defendants Decile Scores')

values = np.arange(0, 650, 100)
value_increment = 100
scores = [1,2,3,4,5,6,7,8,9,10]
plt.bar(scores, cdata['decile_score'].value_counts())
plt.ylabel("counts")
plt.xlabel("Decile Score")
plt.title('White Defendants Decile Scores')

"""Racial Bias in Compas"""

crime_factor = data['c_charge_degree'].to_list
age_factor = data['age_cat'].to_list
race_factor = data['race'].to_list
gender_factor = data['sex'].to_list
score_factor = data['score_text'].to_list

score_factor = data[(data['score_text'] != 'Low')]

"""reference code below"""

#glm_binom = sm.GLM(data.endog, data.exog, family=sm.families.Binomial())
#res = glm_binom.fit()
#print(res.summary())

"""attempt"""

#df = {gender_factor, age_factor, race_factor, crime_factor, data['two_year_recid'].to_list}
#print(score_factor)
#glm = sm.GLM(score_factor, age_factor, family=sm.families.Binomial())

"""separation of race"""

aadata = data[(data['race'] =="African-American")]
cdata = data[(data['race'] =="Caucasian")]
odata = data[(data['race'] =="Other")]

reduce = pd.read_csv('/content/compas-scores-two-years_reduced.csv')
reduce.info()

predictions = pd.read_csv('/content/compaspredict.csv', header=0)

"""All encoding for non-numerical elements"""

#charge
rows = len(reduce)

label = []

for i in range(rows):
  curr = reduce.iloc[i]
  check = curr['c_charge_degree']
  if (check == "M"):
    label.append(0)
  if (check == "F"):
    label.append(1)

reduce.insert(10, "charge", label, True)
print(reduce)

#decile score
rows = len(reduce)

label = []

for i in range(rows):
  curr = reduce.iloc[i]
  check = curr['score_text']
  if (check == "Low" or check == "Medium"):
    label.append(0)
  if (check == "High"):
    label.append(1)

reduce.insert(11, "prescore", label, True)
print(reduce)

#white vs not
rows = len(reduce)

label = []

for i in range(rows):
  curr = reduce.iloc[i]
  check = curr['race']
  if (check == "Caucasian"):
    label.append(0)
  if (check == "African-American" or check == "Other" or check == 'Hispanic'  or check == 'Asian' or check == 'Native American'):
    label.append(1)

reduce.insert(12, "race_label", label, True)
print(reduce)

##african american vs not
rows = len(reduce)

label = []

for i in range(rows):
  curr = reduce.iloc[i]
  check = curr['race']
  if (check == "African-American"):
    label.append(0)
  if (check == "Caucasian" or check == "Other" or check == 'Hispanic'  or check == 'Asian' or check == 'Native American'):
    label.append(1)

reduce.insert(13, "race_label_2", label, True)
print(reduce)

#gender
rows = len(reduce)

genlabel = []

for i in range(rows):
  curr = reduce.iloc[i]
  check = curr['sex']
  if (check == "Male"):
    genlabel.append(0)
  if (check == "Female"):
    genlabel.append(1)

reduce.insert(14, "gender_label", genlabel, True)
reduce.info()

reduce.info()

"""models"""

#this one trains for whites vs non whites


import pandas as pd
import matplotlib as pt
from matplotlib import pyplot as plt

#sex
s = reduce.iloc[:,14].values
#age
a = reduce.iloc[:,3].values
#race
x = reduce.iloc[:, 12].values
#priors
p = reduce.iloc[:, 5].values
#charge
c = reduce.iloc[:, 10].values
#decile
d = reduce.iloc[:,8].values
#two year recid
z = reduce.iloc[:, 7].values

z = z.reshape(-1,1)
x = x.reshape(-1,1)
s = s.reshape(-1,1)
a = a.reshape(-1,1)
p = p.reshape(-1,1)
c = c.reshape(-1,1)
d = d.reshape(-1,1)

#score test
y = reduce.iloc[:, 11].values
y = y.reshape(-1,1)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(np.column_stack((x,z,s,a,p,c,d)), y, test_size= 0.2, random_state=0)

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()
regressor.fit(x_train,y_train)

y_pred = regressor.predict(x_test)

#reduce.insert(15, "Predict", y_pred, True)

score = regressor.score(x_test, y_test)
print(score)
#plt.scatter(x_train, y_train, color = 'g')
#plt.plot(x_test, y_pred, color = 'k')
#plt.show()

#x_test.to_csv('/content/compaspredict.csv', mode='a', index=False, header=True)
pd.DataFrame(x_test).to_csv('/content/compaspredict.csv', header = True)

predictions = pd.read_csv('/content/compaspredict.csv', header=0)
predictions.info()

predictions.insert(8, "Predict", y_pred, True)

print(predictions['Predict'])

predictions.info()

predictions['Predict'] = predictions['Predict'].abs()

predictions['Predict'] = predictions['Predict'].apply(lambda x: round(x, 0))

print(predictions)

race = predictions['0'].values.tolist()
predict_val = predictions['Predict'].values.tolist()

print(race.count(0))
print(race.count(1))
print(predict_val.count(0))
print(predict_val.count(1))
print(len(race))
print(len(predict_val))

counter = 0
goodstuff = []
for x in range(1443):
  #white and low risk
  if(race[counter] == 0 and predict_val[counter] == 0):
      goodstuff.append(0)
  #white and high risk    
  elif(race[counter] == 0 and predict_val[counter] == 1):
      goodstuff.append(1)
  #not white and low risk    
  elif(race[counter] == 1 and predict_val[counter] == 0):
      goodstuff.append(2)
  #not white and high risk    
  elif(race[counter] == 1 and predict_val[counter] == 1):
      goodstuff.append(3)          
  counter += 1

print(goodstuff)
print(len(goodstuff))

whitelow = goodstuff.count(0)/race.count(0)
whitehigh = goodstuff.count(1)/race.count(0)
nwhitelow = goodstuff.count(2)/race.count(1)
nwhitehigh = goodstuff.count(3)/race.count(1)
print(whitelow)
print(whitehigh)
print(nwhitelow)
print(nwhitehigh)

import numpy as np
import matplotlib.pyplot as plt
 
  
# creating the dataset
data = {'White, Low':0.8997912317327766, 'White, High':0.10020876826722339, 'Non-white, Low':0.7531120331950207,
        'Non-white, High':0.24688796680497926}
courses = list(data.keys())
values = list(data.values())
  
fig = plt.figure(figsize = (10, 5))
 
# creating the bar plot
plt.bar(courses, values, color ='maroon',
        width = 0.4)
 
plt.xlabel("Groups")
plt.ylabel("Scores")
plt.title("Prediction of Risk Scores")
plt.show()

sex = predictions['2'].values.tolist()
counter = 0
fm = []
for x in range(1443):
  #male and low risk
  if(sex[counter] == 0 and predict_val[counter] == 0):
      fm.append(0)
  #male and high risk    
  elif(sex[counter] == 0 and predict_val[counter] == 1):
      fm.append(1)
  #female and low risk    
  elif(sex[counter] == 1 and predict_val[counter] == 0):
      fm.append(2)
  #female and high risk    
  elif(sex[counter] == 1 and predict_val[counter] == 1):
      fm.append(3)          
  counter += 1

print(fm)
print(len(fm))

mlow = fm.count(0)/sex.count(0)
mhigh = fm.count(1)/sex.count(0)
flow = fm.count(2)/sex.count(1)
fhigh = fm.count(3)/sex.count(1)
print(mlow)
print(mhigh)
print(flow)
print(fhigh)

import numpy as np
import matplotlib.pyplot as plt
 
  
# creating the dataset
data = {'Male, Low':0.7854113655640373, 'Male, High':0.21458863443596268, 'Female, Low':0.875,
        'Female, High':0.125}
courses = list(data.keys())
values = list(data.values())
  
fig = plt.figure(figsize = (10, 5))
 
# creating the bar plot
plt.bar(courses, values, color ='maroon',
        width = 0.4)
 
plt.xlabel("Groups")
plt.ylabel("Scores")
plt.title("Prediction of Risk Scores")
plt.show()

filtered = filter(lambda x: x >= 0.5, y_pred)
len(list(filtered))

import pandas as pd
import matplotlib as pt
from matplotlib import pyplot as plt

#sex
s = reduce.iloc[:,14].values
#age
a = reduce.iloc[:,3].values
#race
x = reduce.iloc[:, 13].values
#priors
p = reduce.iloc[:, 5].values
#charge
c = reduce.iloc[:, 10].values
#decile
d = reduce.iloc[:,8].values
#two year recid
z = reduce.iloc[:, 7].values

z = z.reshape(-1,1)
x = x.reshape(-1,1)
s = s.reshape(-1,1)
a = a.reshape(-1,1)
p = p.reshape(-1,1)
c = c.reshape(-1,1)
d = d.reshape(-1,1)

#score test
y = reduce.iloc[:, 11].values
y = y.reshape(-1,1)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(np.column_stack((x,z,s,a,p,c,d)), y, test_size= 0.2, random_state=0)

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()
regressor.fit(x_train,y_train)

y_pred = regressor.predict(x_test)

#reduce.insert(9, "Predict", label, True)

score = regressor.score(x_test, y_test)
print(score)
print(y_pred)
#plt.scatter(x_train, y_train, color = 'g')
#plt.plot(x_test, y_pred, color = 'k')
#plt.show()

print(x_train[0])

print(x)
print("**********************")
print(z)
print("**********************")
print(s)
print("**********************")
print(a)
print("**********************")
print(p)
print("**********************")
print(c)
print("**********************")
print(d)

with open('test.txt', 'w') as f:
  for i in range(len(x_test)):
    f.write(str(x_test[i])+'\n')
#print(x_test)

print(y_pred)
with open('scores.txt', 'w') as f:
  for i in range(len(y_pred)):
    f.write(str(y_pred[i])+'\n')

filtered = filter(lambda x: x >= 0.5, y_pred)
len(list(filtered))

filtered = filter(lambda x: x < 0.5, y_pred)
len(list(filtered))

"""data analysis"""

#here i would create a two-dim list with the race data from x_test and then the rounded scores
#matrix = []
#for i in range(len(y_pred)):
#    matrix.append([x_test[i], y_pred[i]])

#then, i would be able to see the ratio of the race data and high/low score

#something like

# whitecount = x_test.count(0)
# lowcount = y_pred.count(0)
# highcount = y_pred.count(1)
# lowratio = whitecount/lowcount
# high ratio = whitecount/highcount

# blackcount = x_test.count(0)
# lowcount = y_pred.count(0)
# highcount = y_pred.count(1)
# lowratio = blackcount/lowcount
# high ratio = blackcount/highcount



"""Risk of Violent Recidivism"""

raw_data = pd.read_csv('/content/compas-scores-two-years.csv')
raw_data.info()

data = raw_data.loc[:, ['age', 'c_charge_degree', 'race', 'age_cat', 'v_score_text', 'sex', 'priors_count', 'days_b_screening_arrest', 'v_decile_score', 'is_recid', 'two_year_recid']]

data = data[(data['days_b_screening_arrest'] <= 30 ) & (data['days_b_screening_arrest'] >= -30 ) & (data['is_recid'] != -1 ) & (data['c_charge_degree'] != "0" ) & (data['v_score_text'] != 'N/A')]
len(data)

data['age_cat'].value_counts()

data['race'].value_counts()

data['v_score_text'].value_counts()

print(sum(data['two_year_recid'] == 1))

print((sum(data['two_year_recid'] == 1))/data.count() * 100)

crime_factor = np.array(data['c_charge_degree'])
age_factor = np.array(data['age_cat'])
race_factor = np.array(data['race'])
gender_factor = np.array(data['sex'])
score_factor = np.array(data['v_score_text'])

values = np.arange(0, 650, 100)
value_increment = 100
scores = [1,2,3,4,5,6,7,8,9,10]
plt.bar(scores, data['v_decile_score'].value_counts())
plt.ylabel("counts")
plt.xlabel("Violent Decile Score")
plt.title('White Defendants Violent Decile Scores')

values = np.arange(0, 650, 100)
value_increment = 100
scores = [1,2,3,4,5,6,7,8,9,10]
plt.bar(scores, data['v_decile_score'].value_counts())
plt.ylabel("counts")
plt.xlabel("Violent Decile Scores")
plt.title('White Defendants Violent Decile Scores')

"""Gender differences in Compas scores"""

data = raw_data.loc[:, ['age', 'c_charge_degree', 'race', 'age_cat', 'score_text', 'sex', 'days_b_screening_arrest', 'decile_score', 'is_recid', 'two_year_recid', 'c_jail_in', 'c_jail_out']]

data = data[(data['days_b_screening_arrest'] <= 30 ) & (data['days_b_screening_arrest'] >= -30 ) & (data['is_recid'] != -1 ) & (data['c_charge_degree'] != "0" ) & (data['score_text'] != 'N/A')]
data.info()

"""Women"""

wdata = data[(data['sex'] =="Female")]
print(wdata)

"""Men"""

mdata = data[(data['sex'] =="Male")]

#pip install lifelines
from lifelines import KaplanMeierFitter
kmf = KaplanMeierFitter() 
#kmf.fit(wdata,label='Kaplan Meier Estimate for Women')
#kmf.plot(ci_show=False)

kmf2 = KaplanMeierFitter() 
#kmf2.fit(mdata,label='Kaplan Meier Estimate for Men')
#kmf2.plot(ci_show=False)